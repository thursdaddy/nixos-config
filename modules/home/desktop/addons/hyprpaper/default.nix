{ lib, config, pkgs, inputs, ... }:
with lib;
with lib.thurs;
let

cfg = config.mine.home.hyprpaper;
user = config.mine.nixos.user;

in {
  options.mine.home.hyprpaper = {
    enable = mkOpt types.bool false "hyprpaper";

    settings = with types; {
      preload = mkOption {
        type = listOf path;
        default = [ ];
        description = ''
          Wallpaper images that should be preloaded into memory
          '';
        example = [ ./wallpapers/example.png ];
      };
      wallpapers = mkOption {
        type = listOf str;
        default = [ ];
        description = ''
          Wallpaper to monitor mapper
          '';
        example = [ "monitor,./wallpapers/example.png" ];
      };
    };
  };

  config = mkIf cfg.enable {
    mine.home.hyprpaper.settings = {
      preload = [
        "/home/thurs/pictures/wallpapers/blue_astronaut_in_space.png"
        "/home/thurs/pictures/wallpapers/Kurzgesagt_Galaxies.png"
      ];
      wallpapers = [
        "DP-2,/home/thurs/pictures/wallpapers/blue_astronaut_in_space.png"
        "DP-1,/home/thurs/pictures/wallpapers/Kurzgesagt_Galaxies.png"
      ];
    };

    environment.systemPackages = [
      inputs.hyprpaper.packages.${pkgs.system}.hyprpaper
    ];

    systemd.user.services.hyprpaper = {
      bindsTo = ["graphical-session.target"];
      after = ["graphical-session-pre.target"];
      description = "autostart service for Hyprpaper";
      documentation = ["https://github.com/hyprwm/hyprpaper"];
      serviceConfig = {
        ExecStart = "${lib.getExe inputs.hyprpaper.packages.${pkgs.system}.hyprpaper}";
        ExecStop = "${pkgs.coreutils}/bin/kill -SIGUSR2 $MAINPID";
        Restart = "on-failure";
        KillMode = "mixed";
      };
      wantedBy = [ "hyprland-session.target" ];
    };

    home-manager.users.${user.name} = {
      xdg.configFile = { "hypr/hyprpaper.conf".text = ''
        # Auto-generated by Nix home-manager module

        # hyprpaper.settings.preload
        ${(lists.foldl (acc: v:
          acc + ''
            preload = ${v}
          '') "" cfg.settings.preload)}
        ${(lists.foldl (acc: v:
          acc + ''
            wallpaper = ${v}
            '') "" cfg.settings.wallpapers)}
      '';
      };
    };

  };
}
