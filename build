#!/usr/bin/env bash
# shellcheck disable=SC2059

# just a simple wrapper script for nix builds

# ansi color codes
BLUE='\033[0;34m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
WHITE='\033[0;37m'
GREY='\033[4;39m'
NC='\033[0m' # No Color

#--option eval-cache false
build () {
  printf "\n${ORANGE}Building: ${WHITE}${TARGET}${NC}\n"
  nix build .\#"${TARGET}" && copy_artifact_path && cleanup
}

rebuild () {
  printf "\n${BLUE}Rebuilding: ${WHITE}${TARGET}${NC}\n"
  if [[ "$TARGET" == "c137" ]]; then
    sudo nixos-rebuild --flake .\#c137 switch
  elif [[ "$TARGET" == "piholes" ]]; then
    printf "${BLUE}Rebuilding: ${WHITE}netpi1${NC}\n"
    nixos-rebuild --flake .\#netpi1 --target-host netpi1 --use-remote-sudo switch
    printf "${BLUE}Rebuilding: ${WHITE}netpi2${NC}\n"
    nixos-rebuild --flake .\#netpi2 --target-host netpi2 --use-remote-sudo switch
    printf "${BLUE}Rebuilding: ${WHITE}monpi${NC}\n"
    nixos-rebuild --flake .\#monpi --target-host monpi --use-remote-sudo switch
  elif [[ "$TARGET" == "mbp" ]]; then
    darwin-rebuild --flake .\#mbp switch
  else
    nixos-rebuild --flake .\#"${TARGET}" --target-host "${TARGET}" --use-remote-sudo switch
  fi
}

# copy result to builds/
function copy_artifact_path {
  printf "${GREEN}Copying file..${NC}\n"
  if [ -L ./result ]; then
    ARTIFACT_PATH=$(readlink ./result)
    # vhd = ami, zst = sd-aarch64
    ARTIFACT=$(find "$ARTIFACT_PATH" -type f \( -iname '*.vhd' -o -iname '*.zst' -iname '*iso' \))
    printf "\nCopy ${ARTIFACT} to builds/\n\n"
    sudo cp "$ARTIFACT" builds/
  else
    exit 1
  fi
}

# update perms and remove $result
function cleanup {
  printf "${GREEN}Cleaning up..${NC}\n"
  if [ -L ./result ]; then rm -v ./result; fi
  printf "${WHITE}Updating permissions in builds dir:${NC}\n"
  sudo chown -R "$(whoami)":users builds/
  printf "${GREEN}Builds:${NC}\n"
  ls -lah builds/
}

# loop through hypr repos and check if newer tag exists
function check_hypr_version {
  printf "\n${WHITE}HYPR TAGS:${NC}\n"
  grep hyprwm flake.nix | awk -F "hyprwm/" '{ print $2 }' | sed -e 's/\/?ref//g' -e 's/";//g' | while read -r repo; do
    REPO_NAME=$(echo "$repo" | awk -F'=' '{ print tolower($1) }')
    TAG_CURRENT=$(echo "$repo" | awk -F '=' '{ print $2 }')
    TAG_LATEST=$(curl -s "https://api.github.com/repos/hyprwm/$REPO_NAME/releases/latest" --header "Authorization: Bearer $GH_TOKEN" --header "X-GitHub-Api-Version: 2022-11-28" | jq -r '.tag_name')
    if [[ "$TAG_LATEST" == "null" ]]; then
      printf "${BLUE}${REPO_NAME} ${ORANGE}failed to get tag"
    elif [[ "$TAG_CURRENT" == "$TAG_LATEST" ]]; then
      printf "${BLUE}$REPO_NAME\t${GREEN}($TAG_CURRENT)${NC}\n"
    elif [[ "$TAG_CURRENT" != "$TAG_LATEST" ]]; then
      printf "${BLUE}$REPO_NAME\t${GREEN}($TAG_CURRENT)${NC} ${WHITE}latest: ${ORANGE}${TAG_LATEST}${NC} - ${GREY}https://github.com/hyprwm/${REPO_NAME}/releases/${TAG_LATEST}${NC}\n"
    fi
  done
  printf "\n"
}

update_local_input () {
  # set path based on target
  # my projects dir is syncthing'd across multiple machines
  printf "${BLUE}Setting input to local: ${WHITE}${INPUT}${NC}"
  if [[ ${HOSTNAME:-$HOST} =~ "mbp" ]]; then
    local NIXOS_THURS_PATH="\/Users\/thurs"
  else
    local NIXOS_THURS_PATH="\/home\/thurs"
  fi
  # if github url is set, replace it
  sed -i 's/      url = ".*'"${INPUT}"'.*/      url = "git+file:\/\/'"${NIXOS_THURS_PATH}"'\/projects\/nix\/'"${INPUT}"'\/";/g' flake.nix
  # finally update
  nix flake lock --update-input "${INPUT}"
}

update_flake_input () {
  printf "${BLUE}Updating input: ${WHITE}${INPUT}"
  if [[ $INPUT == "nixos-thurs" ]]; then
    sed -i 's/      url = ".*'"${INPUT}"'.*/      url = "github:thursdaddy\/'"${INPUT}"'\/main";/g' flake.nix
  fi
  nix flake lock --update-input "${INPUT}"
}

print_help () {
  printf "${ORANGE}What did you forget..?${NC}\n"
  printf "Usage: ${NC}./build ${WHITE}[target] ${GREEN}[options]${NC}\n"
  printf "\nArguments:\n\t${WHITE}TARGET\t${NC}Target for build/rebuild, must be defined in rebuild and build function.\n"
  printf "\nOptions:\n"
  printf "\t${GREEN}-c --check-hypr\n\t\t${NC}Check Hypr* repos latest releases.${NC}\n\n"
  printf "\t${GREEN}-u --update-input [name|local] {name-opt}\n\t\t${NC}Update flake input by name, local as first arg will update input to local path, defaults to 'nixos-thurs'.\n"
  printf "\t\tIf input is already local, it will be updated to public github url.\n"
}

# gnu-sed fix on MBP
if [[ ${HOSTNAME:-$HOST} =~ "mbp" ]]; then
  PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"
fi

# set GH_TOKEN to pull private flake (and when checking hypr tags)
if [ -f "/run/secrets/github/TOKEN" ] || [ -f "/Users/thurs/.gh_token" ]; then
  if [[ ${HOSTNAME:-$HOST} =~ "mbp" ]]; then
    GH_TOKEN=$(cat ~/.config/sops-nix/secrets/github/TOKEN)
  else
    GH_TOKEN=$(cat /run/secrets/github/TOKEN)
  fi
  export NIX_CONFIG="extra-access-tokens = github.com=${GH_TOKEN}"
else
  printf "${ORANGE}No GH token set.${NC}"
  GH_TOKEN=''
fi

# update flake to local path:             ./build null --update-input local <input>
# update flakes individually:             ./build c137 --update-input hyprland
# replace local path with remote url:     ./build c137 --update-input nixos-thurs
if [ "$2" == "--update-input" ] || [ "$2" == "-u" ]; then
  case $3 in
    local)
      INPUT="${4:-nixos-thurs}"
      update_local_input "${INPUT}"
      ;;
    *)
      INPUT="$3"
      update_flake_input "${INPUT}"
      ;;
  esac
fi

# flakes are married to git
git add .

# ./build <TARGET> --ARG
TARGET=$1
case $TARGET in
  --help)
    print_help
    ;;
  -*u*) # lol, jank skip -u and --update-input
    ;;
  -*c*) # lol, jank skip -c and --check-hypr
    ;;
  iso)
    build "$TARGET"
    ;;
  ami)
    build "$TARGET"
    ;;
  sd-aarch64)
    build "$TARGET"
    ;;
  null)
    # placeholder when just wanting to --check-hypr or --update-input
    if [ "$2" == "--check-hypr" ] || [ "$2" == '-c' ]; then check_hypr_version; fi
    ;;
  *)
    # adhoc argument to check github for latest hypr* tags
    rebuild "$TARGET"
    ;;
esac
