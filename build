#!/usr/bin/env bash
# just a simple wrapper script for nix builds

# ansi color codes
BLUE='\033[1;34m'
GREEN='\033[1;32m'
ORANGE='\033[0;33m'
WHITE='\033[1;37m'
GREY='\033[4;39m'
NC='\033[0m' # No Color

TARGET=$1

function build_ami {
  nix build .\#ami
  copy_artifact_path && cleanup
}

function build_c137 {
  sudo nixos-rebuild --flake .\#c137 switch #--option eval-cache false
}

function build_cloudbox {
  nixos-rebuild --flake .\#cloudbox --target-host thurs@cloudbox --use-remote-sudo switch
}

function build_netpi {
  nixos-rebuild --flake .\#netpi1 --target-host thurs@192.168.20.35 --use-remote-sudo switch #--option eval-cache false
  nixos-rebuild --flake .\#netpi2 --target-host thurs@192.168.20.51 --use-remote-sudo switch #--option eval-cache false
}

function build_mbp {
  darwin-rebuild switch --flake .\#mbp --option eval-cache false
}

function build_sd-aarch64 {
  nix build .\#sd-aarch64
  copy_artifact_path && cleanup
}

function copy_artifact_path {
  if [ -L ./result ]; then
    ARTIFACT_PATH=$(readlink ./result)
    # vhd = ami, zst = sd-aarch64
    ARTIFACT=$(find $ARTIFACT_PATH -type f \( -iname '*.vhd' -o -iname '*.zst' \))
    printf "\nCopy $ARTIFACT to builds/\n\n"
    sudo cp $ARTIFACT builds/
  else
    exit 1
  fi
}

function cleanup {
  if [ -L ./result ]; then rm -v ./result; fi
  printf "Updating permissions in builds dir:\n"
  sudo chown -R $(whoami):users builds/
  ls -lah builds/ | grep nixos
}

function check_hypr_version {
  printf "\n${WHITE}HYPR TAGS:${NC}\n"
  for repo in $(grep hyprwm flake.nix | awk -F "hyprwm/" '{ print $2 }' | sed -e 's/\/?ref//g' -e 's/";//g'); do
    REPO_NAME=$(echo $repo | awk -F'=' '{ print tolower($1) }')
    TAG_CURRENT=$(echo $repo | awk -F '=' '{ print $2 }')
    TAG_LATEST=$(curl -s "https://api.github.com/repos/hyprwm/$REPO_NAME/releases/latest" --header "Authorization: Bearer $GH_TOKEN" --header "X-GitHub-Api-Version: 2022-11-28" | jq -r '.tag_name')
    if [[ "$TAG_LATEST" == "null" ]]; then
      printf "${BLUE}${REPO_NAME} ${ORANGE}failed to get tag"
    elif [[ "$TAG_CURRENT" == "$TAG_LATEST" ]]; then
      printf "${BLUE}$REPO_NAME\t${GREEN}($TAG_CURRENT)${NC}\n"
    elif [[ "$TAG_CURRENT" != "$TAG_LATEST" ]]; then
      printf "${BLUE}$REPO_NAME\t${GREEN}($TAG_CURRENT)${NC} ${WHITE}latest: ${ORANGE}${TAG_LATEST}${NC} - ${GREY}https://github.com/hyprwm/${REPO_NAME}/releases/${TAG_LATEST}${NC}\n"
    fi
  done
  printf "\n"
}

function update_nixos_thurs_input {
  # url = "github:thursdaddy/nixos-thurs/main";
  echo "update"
  sed -i 's/      url = "github:thursdaddy\/nixos-thurs\/main";/     # url = "github:thursdaddy\/nixos-thurs\/main";/g' flake.nix
  sed -i 's/      # url = "git+file:\/\/\/home\/thurs\/projects\/nix\/nixos-thurs\/";/      url = "git+file:\/\/\/home\/thurs\/projects\/nix\/nixos-thurs\/";/g' flake.nix
  nix flake lock --update-input nixos-thurs
}


if [ "$2" == "--update-input" ]; then update_nixos_thurs_input; fi

# flakes are married to git
git add .

if [ -f "/run/secrets/github_token" ]; then
 GH_TOKEN=$(cat /run/secrets/github_token)
 export NIX_CONFIG="extra-access-tokens = ${GH_TOKEN}"
else
  GH_TOKEN=''
fi

case $TARGET in
  ami)
    build_ami
    ;;
  c137)
    if [ "$2" == "--check" ]; then check_hypr_version; fi
    build_c137
    ;;
  cloudbox)
    build_cloudbox
    ;;
  mbp)
    build_mbp
    ;;
  netpi)
    build_netpi
    ;;
  sd-aarch64)
    build_sd-aarch64
    ;;
esac
